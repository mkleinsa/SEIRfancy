% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{SEIRfansy.predict}
\alias{SEIRfansy.predict}
\title{Prediction for SEIRfansy Model}
\usage{
SEIRfansy.predict(
  data = NULL,
  data_init,
  init_pars = NULL,
  N,
  plot = TRUE,
  T_predict,
  period_start,
  estimate = TRUE,
  pars = NULL,
  data_test = NULL,
  auto.initialize = TRUE,
  ...
)
}
\arguments{
\item{data}{(Mandatory) input : Mainly the training dataset. If the model is
Multinomial then the data matrix should contain 3 columns namely Confirmed,
Recovered and Death, while if the model is Poisson or Binomial, then the data
should contain only one column namely Confirmed. Please see that the names of
the colums are maintained.}

\item{data_init}{(Mandatory) This is the initial data values that should be
provided by the user which is a six size length vector. The first entry should
contain the Total Confirmed, Total Recovered ,Total Death , Daily Confirmed ,
Daily Recovered and Daily Death for the Starting Date. If the starting total
confirmed is 0 , please replace it by 1.}

\item{init_pars}{= NULL( default) . Else the user can give a user input initial
parameters which should consist of the initial values of the time varying beta ,
proportion of testing for the different periods.}

\item{N}{(Mandatory) : The population size.}

\item{plot}{=TRUE . If estimate = FALSE , this will give two plots , one is
the panel plot for total cases, total recovered, total death and total
confirmed if the model is Multinomial , else it will give only a plot for total
confirmed when the model is binomial or poisson and the second plot is the plot
of untested, false negative and reported cases. And when estimate=  TRUE ,
then it will give two other plots along with the previous two plots. One is the
box plot for basic reproduction number and the other one is the trace plot for
the convergence of the mcmc paramters.}

\item{T_predict}{It is the no of days that we want to predict after the train
period. The value of T_predict should be atleast greater than equal to  the no
of rows for the data_test.}

\item{period_start}{The total time period is divided into small periods depending
on the lockdowm measures imposed by the goverment. So this is a vector consisting
of the start dates for the different time periods.}

\item{estimate}{= TRUE (default) If it is TRUE then it will run the MCMC algorithm
to estimate the parameters. Else if it is FALSE then the user needs to give
input the paramter values in the pars argument.}

\item{pars}{= NULL (default) .If estimate = FALSE, then the user need to give
input the paramter estimates .}

\item{data_test}{= NULL ( default). Else the person needs to give to give the
test data for comparing with the model estimates.}

\item{auto.initialize}{= TRUE(default) This is the option for using a mle
based initial parameter.}
}
\value{
A list with class "SEIRfansyPredict", which contains the items described
below:
\itemize{
\item{mcmc_pars: }{a matrix of the mcmc draws for the parameters}
\item{plots: }{a list of ggplot objects}
}
}
\description{
This function is used to predict the total reported as well as unreported case
counts, total recovered, and total deaths
}
\examples{
library(dplyr)
train = covid19[which(covid19$Date == "01 April "):which(covid19$Date == "30 June "),]
test = covid19[which(covid19$Date == "01 July "):which(covid19$Date == "31 July "),]

train_multinom = 
 train \%>\% 
   rename(Confirmed = Daily.Confirmed, 
          Recovered = Daily.Recovered,
          Deceased = Daily.Deceased) \%>\%
   dplyr::select(Confirmed, Recovered, Deceased)
 
 test_multinom = 
   test \%>\% 
   rename(Confirmed = Daily.Confirmed, 
          Recovered = Daily.Recovered,
          Deceased = Daily.Deceased) \%>\%
   dplyr::select(Confirmed, Recovered, Deceased)
 
N = 1341e6 # population size of India
data_initial = c(2059, 169, 58, 424, 9, 11)
pars_start = c(c(1,0.8,0.6,0.4,0.2), c(0.2,0.2,0.2,0.25,0.2))
phases = c(1,15,34,48,62)
 
 cov19pred = SEIRfansy.predict(data = train_multinom, init_pars = pars_start, 
                               data_init = data_initial, T_predict = 60, niter = 1e3, 
                               BurnIn = 1e2, data_test = test_multinom, model = "Multinomial", 
                               N = N, lambda = 1/(69.416 * 365), mu = 1/(69.416 * 365), 
                               period_start = phases, opt_num = 1, 
                               auto.initialize = TRUE, f = 0.15)

names(cov19pred)
class(cov19pred$prediction)
class(cov19pred$mcmc_pars)
names(cov19pred$plots)

plot(cov19pred, type = "trace")
plot(cov19pred, type = "boxplot")
plot(cov19pred, type = "panel")
plot(cov19pred, type = "cases")


}
